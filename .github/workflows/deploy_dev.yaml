name: Deploy Frontend and Backend

on:
  push:
    branches:
      - main   # Deploy on push to the main branch

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  SITE_NAME: ${{ secrets.SITE_NAME }}
  SITE_URL: ${{ secrets.DEV_SITE_URL }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Node.js for frontend and backend
    - name: Set up Node.js for both frontend and backend
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    # ===============================
    # FRONTEND DEPLOYMENT (React)
    # ===============================
    # Step 3: Install and build React frontend
    - name: Install and build React frontend
      working-directory: frontend   # Ensure this path is correct
      run: |
        npm install
        npm run build

    # Step 4: Deploy React build to S3
    - name: Deploy React to S3
      run: |
        aws s3 sync ./frontend/build s3://your-frontend-s3-bucket/ --delete
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # ===============================
    # BACKEND DEPLOYMENT (Node.js)
    # ===============================
    # Step 5: Build, tag, and push Docker image for backend
    - name: Build, tag, and push backend image to Amazon ECR
      working-directory: backend  # Ensure this path is correct
      run: |
        # Log in to Amazon ECR
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
        
        # Build the Docker image for the backend
        docker build -t $ECR_REGISTRY/$SITE_NAME:$GITHUB_SHA .

        # Tag and push the image
        docker push $ECR_REGISTRY/$SITE_NAME:$GITHUB_SHA
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Step 6: Update ECS Task Definition
    - name: Update ECS Task Definition
      id: update-task
      run: |
        aws ecs update-service \
          --cluster your-ecs-cluster-name \
          --service ${{ secrets.SITE_NAME }}-service \
          --force-new-deployment

    # Optionally: Wait for the ECS service to stabilize
    - name: Wait for ECS Service to stabilize
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        service: ${{ secrets.SITE_NAME }}-service
        cluster: your-ecs-cluster-name
        wait-for-service-stability: true
